name: Sync Documentation

on:
  release:
    types: [published, edited, created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name to analyze (leave empty for latest)"
        required: false
        type: string

env:
  DOCS_REPO: xmtp/docs-xmtp-org
  BRANCH_PREFIX: auto-update-react-native-docs

jobs:
  sync-docs:
    name: Sync React Native Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout React Native SDK
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: react-native-sdk
      
      - name: Checkout Documentation Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.DOCS_REPO }}
          token: ${{ secrets.DOCS_SYNC_TOKEN }}
          path: docs-repo
          ref: 1bf5c3c5baeefa64b2e4f2fb73bd79c28e8ae95f
      
      - name: Determine tag to analyze
        id: tag
        run: |
          cd react-native-sdk
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG=$(git describe --tags --abbrev=0)
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Analyzing tag: $TAG"

      - name: Get previous tag for diff
        id: prev_tag
        run: |
          cd react-native-sdk
          CURRENT_TAG="${{ steps.tag.outputs.tag }}"
          PREV_TAG=$(git tag --sort=-version:refname | grep -A 1 "^$CURRENT_TAG$" | tail -n 1)
          if [ "$PREV_TAG" = "$CURRENT_TAG" ] || [ -z "$PREV_TAG" ]; then
            # If no previous tag or same tag, get the tag before current
            PREV_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"
      
      - name: Create documentation analysis prompt
        run: |
          cat > docs-repo/analysis_prompt.md << 'EOF'
          # Documentation Sync Analysis

          You are an expert technical writer tasked with analyzing changes in the XMTP React Native SDK and updating our documentation with extreme precision.

          ## Context
          - Current release tag: ${{ steps.tag.outputs.tag }}
          - Previous tag: ${{ steps.prev_tag.outputs.prev_tag }}
          - React Native SDK repo: `react-native-sdk/`
          - Documentation repo: `docs-repo/`

          ## Core Task
          Your primary goal is to ensure the documentation in `docs-repo/` is perfectly aligned with the API changes presented in the "Release Changes Summary" below.

          1. **Analyze the Diffs**: Carefully analyze the provided `git diff` outputs for each section.
          2. **Identify Required Edits**: Determine which documentation files need to be updated to reflect these specific API changes, new features, or deprecations.
          3. **Update Documentation**: Edit the files in `docs-repo/` to match the current SDK state. Focus on code samples, API references, and integration guides.

          ## Requirements
          - **Precision is paramount**: Only make changes that are directly supported by the provided diffs. Do not add information or make edits that are not reflected in the API changes.
          - **Be conservative**: If a change is ambiguous or you are not 100% certain how to update the documentation for it, it is better to skip it than to introduce an error.
          - All code samples must be valid TypeScript/JavaScript with the current SDK version (${{ steps.tag.outputs.tag }})
          - Update version numbers in installation instructions
          - Flag any breaking changes that need migration guides. Only edit migration guides (`upgrade-from-legacy-*.md`) if there is an explicit and clear breaking change in the diffs that necessitates it. Be extremely careful with these files.
          - Maintain consistency with existing documentation style
          - Create clear, actionable updates
          - Use comprehensive analysis tools to ensure thorough coverage
          - Verify documentation accuracy by cross-referencing with source code
          - Search for related documentation files that may need updates
          - Pay special attention to React Native specific patterns and examples

          ## Key areas to check
          - Client initialization and configuration
          - Message sending and receiving
          - Group and DM management
          - Codec usage (attachments, reactions, etc.)
          - Context providers and hooks usage
          - Push notification setup for React Native
          - Error handling patterns
          - Authentication flows
          - Expo integration

          ## Available Tools
          You have access to comprehensive tools including:
          - File operations (Read, Write, Edit, MultiEdit)
          - Search tools (Glob, Grep, Task)
          - Web tools (WebFetch, WebSearch) for additional context
          - Organization tools (TodoRead, TodoWrite) for systematic updates
          - Command execution (Bash) for git operations and analysis

          Use these tools systematically to ensure comprehensive documentation updates.

          ## Release Changes Summary
          EOF

          # Append the release diff to the prompt
          cd react-native-sdk
          echo "### Changed Files:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} --name-only | head -50 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md

          echo "### Core Client API Changes:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} -- src/lib/Client.ts src/XMTPModule.ts src/index.ts | head -200 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md

          echo "### Conversation/Group/DM API Changes:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} -- src/lib/Conversation.ts src/lib/Group.ts src/lib/Dm.ts src/lib/Conversations.ts | head -200 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md

          echo "### Hooks and Context API Changes:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} -- src/hooks/ src/context/ | head -100 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md

          echo "### Content Type Codec Changes:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} -- src/lib/NativeCodecs/ | head -100 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md

          echo "### Package.json Version Changes:" >> ../docs-repo/analysis_prompt.md
          git diff ${{ steps.prev_tag.outputs.prev_tag }}..${{ steps.tag.outputs.tag }} -- "**/package.json" | grep -E "^\+.*version|^\-.*version" | head -20 >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md
          
          echo "## IMPORTANT: Summary Output" >> ../docs-repo/analysis_prompt.md
          echo "After completing all documentation updates, you MUST create a file called 'CLAUDE_SUMMARY.md' in the docs-repo directory with:" >> ../docs-repo/analysis_prompt.md
          echo "1. A concise summary of what changes were made" >> ../docs-repo/analysis_prompt.md
          echo "2. Key API changes or breaking changes identified" >> ../docs-repo/analysis_prompt.md
          echo "3. Files that were updated and why" >> ../docs-repo/analysis_prompt.md
          echo "4. Any areas that may need manual review" >> ../docs-repo/analysis_prompt.md
          echo "" >> ../docs-repo/analysis_prompt.md
          echo "This summary will be used in the pull request description to help reviewers understand the changes. If no changes were made, create an empty CLAUDE_SUMMARY.md file." >> ../docs-repo/analysis_prompt.md
      
      - name: Run Claude Code Documentation Analysis
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: docs-repo/analysis_prompt.md
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          allowed_tools: "Bash,Read,Write,Edit,MultiEdit,Glob,Grep,LS,Task,WebFetch,WebSearch,TodoRead,TodoWrite,NotebookRead,NotebookEdit"
          max_turns: 20
          timeout_minutes: 30
      
      - name: Create branch and commit changes
        id: commit
        run: |
          cd docs-repo
          BRANCH_NAME="${{ env.BRANCH_PREFIX }}-${{ steps.tag.outputs.tag }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          # Capture Claude's summary if it exists
          if [ -f "CLAUDE_SUMMARY.md" ]; then
            echo "Claude summary found, capturing for PR body"
            # Store the summary content in a file that survives the git operations
            cp CLAUDE_SUMMARY.md /tmp/claude_summary.md
            echo "claude_summary_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No Claude summary found"
            echo "claude_summary_exists=false" >> $GITHUB_OUTPUT
          fi

          # Remove internal workflow files
          rm -f analysis_prompt.md CLAUDE_SUMMARY.md

          # Check if there are any changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "No documentation changes needed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            # Add all changes (excluding the removed prompt and summary files)
            git add .
            
            # Commit changes
            git commit -m "Update React Native SDK documentation for release ${{ steps.tag.outputs.tag }}

            Automated update based on changes in xmtp-react-native ${{ steps.tag.outputs.tag }}
            
            Changes analyzed:
            - API modifications and new features
            - Code sample accuracy
            - Version compatibility
            - Breaking changes documentation
            
            Generated by Claude Code Actions"
            
            # Push branch
            git push origin "$BRANCH_NAME"
          fi
      
      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.DOCS_SYNC_TOKEN }}
        run: |
          cd docs-repo

          # Start building PR body
          PR_BODY="## 🤖 Automated React Native SDK Documentation Update

          This PR updates the documentation to align with React Native SDK release [\`${{ steps.tag.outputs.tag }}\`](https://github.com/xmtp/xmtp-react-native/releases/tag/${{ steps.tag.outputs.tag }})."

          # Add Claude's summary if it exists
          if [ "${{ steps.commit.outputs.claude_summary_exists }}" = "true" ] && [ -f "/tmp/claude_summary.md" ]; then
            PR_BODY="$PR_BODY

          ## 📋 Analysis Summary

          $(cat /tmp/claude_summary.md)"
          else
            # Fallback to generic summary
            PR_BODY="$PR_BODY

            ### Changes Made
            - Updated code samples to match current SDK APIs
            - Verified React Native integration examples
            - Updated version references and installation instructions
            - Addressed any breaking changes or deprecations
            - Updated TypeScript/JavaScript examples for accuracy
            - Verified Expo integration patterns"
          fi

          # Add verification checklist
          PR_BODY="$PR_BODY

          ### Verification Needed
          - [ ] Review all React Native code samples for accuracy
          - [ ] Test integration examples with current SDK version
          - [ ] Verify version compatibility information
          - [ ] Check TypeScript definitions and examples
          - [ ] Validate Expo configuration steps
          - [ ] Check for any missed documentation updates

          ---
          *This PR was automatically generated by Claude Code Actions*"

          # Create the PR
          gh pr create \
            --title "📱 Update React Native SDK docs for ${{ steps.tag.outputs.tag }}" \
            --body "$PR_BODY" \
            --head "${{ steps.commit.outputs.branch_name }}" \
            --base main

      - name: Output results
        run: |
          if [ "${{ steps.commit.outputs.has_changes }}" = "true" ]; then
            echo "✅ Documentation sync completed successfully"
            echo "📝 Pull request created in ${{ env.DOCS_REPO }}"
            echo "🔗 Check: https://github.com/${{ env.DOCS_REPO }}/pulls"
          else
            echo "ℹ️ No documentation changes required for this release"
          fi