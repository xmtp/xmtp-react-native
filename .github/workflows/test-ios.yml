name: iOS Tests
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPR_USER: ${{ secrets.GITHUB_ACTOR }}

jobs:
  android-tests:
    timeout-minutes: 45
    name: iOS Tests
    runs-on: macos-15
    permissions:
      contents: read
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v5

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0.1"

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: yarn

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          cd ./example
          yarn install --frozen-lockfile

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Create build
        run: |
          cd ./example
          set -euo pipefail

          expo prebuild --platform ios --non-interactive
          npx pod-install

          WORKSPACE="ios/xmtpreactnativesdkexample.xcworkspace"
          SCHEME=$(xcodebuild -workspace "$WORKSPACE" -list -json | python3 -c "import json,sys; print(json.load(sys.stdin)['workspace']['schemes'][0])")
          DERIVED_DATA="ios/build"

          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath "$DERIVED_DATA" \
            build

          SIMULATOR_ID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone 1[56789]/ {print $2; exit}')
          if [ -z "$SIMULATOR_ID" ]; then
            SIMULATOR_ID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')
          fi

          if [ -z "$SIMULATOR_ID" ]; then
            echo "Unable to find an available iPhone simulator." >&2
            exit 1
          fi

          xcrun simctl boot "$SIMULATOR_ID" || true
          xcrun simctl bootstatus "$SIMULATOR_ID" -b

          APP_PATH=$(find "$DERIVED_DATA/Build/Products" -type d -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Unable to locate the built app bundle." >&2
            exit 1
          fi

          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print:CFBundleIdentifier" "$APP_PATH/Info.plist")
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          xcrun simctl launch --terminate-running "$SIMULATOR_ID" "$BUNDLE_ID"

          maestro test --format junit --test-output-dir ./e2e/.maestro ./e2e/android-test.yaml
