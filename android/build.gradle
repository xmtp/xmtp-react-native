apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

group = 'expo.modules.xmtpreactnativesdk'
version = '0.1.0'

buildscript {
  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
  if (expoModulesCorePlugin.exists()) {
    apply from: expoModulesCorePlugin
    applyKotlinExpoModulesCorePlugin()
  }

  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  // Ensures backward compatibility
  ext.getKotlinVersion = {
    if (ext.has("kotlinVersion")) {
      ext.kotlinVersion()
    } else {
      ext.safeExtGet("kotlinVersion", "1.6.10")
    }
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
  }
}

// Creating sources with comments
if (GradleVersion.current() < GradleVersion.version('8.0')) {
    task androidSourcesJar(type: Jar) {
      classifier  = 'sources'
      from android.sourceSets.main.java.srcDirs
    }
} else {
    task androidSourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from android.sourceSets.main.java.srcDirs
    }
}

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        from components.release
        // Add additional sourcesJar to artifacts
        artifact(androidSourcesJar)
      }
    }
    repositories {
      maven {
        url = mavenLocal().url
      }
    }
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 33)

  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
  if (agpVersion.tokenize('.')[0].toInteger() < 8) {
    compileOptions {
      sourceCompatibility JavaVersion.VERSION_11
      targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_11.majorVersion
    }
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 23)
    targetSdkVersion safeExtGet("targetSdkVersion", 31)
    versionCode 1
    versionName "0.1.0"
  }
  lintOptions {
    abortOnError false
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':expo-modules-core')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
  implementation "org.xmtp:android:3.0.5"
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'com.facebook.react:react-native:0.71.3'
  implementation "com.daveanthonythomas.moshipack:moshipack:1.0.1"
  // xmtp-android local testing setup below (comment org.xmtp:android above)
  // implementation files('<PATH_TO_LIBRARY>/xmtp-android/library/build/outputs/aar/library-debug.aar')
  // implementation 'com.google.crypto.tink:tink-android:1.8.0'
  //   implementation 'io.grpc:grpc-kotlin-stub:1.4.1'
  //   implementation 'io.grpc:grpc-okhttp:1.62.2'
  //   implementation 'io.grpc:grpc-protobuf-lite:1.62.2'
  //   implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
  //   implementation 'org.web3j:crypto:5.0.0'
  //   implementation "net.java.dev.jna:jna:5.14.0@aar"
  //   api 'com.google.protobuf:protobuf-kotlin-lite:3.22.3'
  //   api 'org.xmtp:proto-kotlin:3.62.1'
}
